#include <iostream>
#include "classes.h"
#include <stdlib.h>
#include <memory>
#include <conio.h>
#include <random>
#include "mysql_connection.h"
#include <cppconn/driver.h>
#include <cppconn/exception.h>
#include <cppconn/prepared_statement.h>
#include <cppconn/resultset.h>

using namespace std;

const string server = "tcp://127.0.0.1";
const string username = "root";
const string password = "";

// Funkcja wczytująca hasło z ukrytym wyświetlaniem na Windows
string getHiddenPassword() {
    string password;
    cout << "Podaj haslo: ";

    char ch;
    while ((ch = _getch()) != '\r') {  // wczytaj znaki, dopóki nie zostanie naciśnięty Enter
        if (ch == '\b' && !password.empty()) {  // obsługa klawisza backspace
            cout << "\b \b";
            password.pop_back();
        } else {
            password.push_back(ch);
            cout << '*';  // wyświetl gwiazdkę zamiast rzeczywistego znaku
        }
    }

    cout << endl;
    return password;
}

// Funkcja logowania
bool login(sql::Connection* con, const string& pesel) {
    string password = getHiddenPassword();  // Wczytanie hasła bez wyświetlania

    try {
        unique_ptr<sql::PreparedStatement> pstmt(con->prepareStatement("SELECT password FROM bankregisterclient WHERE pesel = ?"));
        pstmt->setString(1, pesel);
        unique_ptr<sql::ResultSet> res(pstmt->executeQuery());
        if (res->next()) {
            string storedPassword = res->getString("password");
            if (storedPassword == password) {
                return true;
            } else {
                cout << "Niepoprawne haslo." << endl;
                return false;
            }
        } else {
            cout << "Konto nie istnieje." << endl;
            return false;
        }
    } catch (sql::SQLException& e) {
        cerr << "SQL Error: " << e.what() << endl;
        cerr << "SQLState: " << e.getSQLState() << endl;
        cerr << "Error Code: " << e.getErrorCode() << endl;
        return false;
    } catch (exception& e) {
        cerr << "Other Error: " << e.what() << endl;
        return false;
    }
}

bool czyPeselPoprawny(const string& pesel) {
    // Sprawdzenie długości PESEL
    if (pesel.length() != 11) {
        return false;
    }

    // Sprawdzenie czy każdy znak PESEL jest cyfrą
    for (char c : pesel) {
        if (!isdigit(c)) {
            return false;
        }
    }

    // Jeśli wszystkie warunki są spełnione, PESEL jest poprawny
    return true;
}

bool czyNumerPoprawny(const string& numer_rozliczeniowy) {
    // Sprawdzenie długości numeru rozliczeniowego 
    if (numer_rozliczeniowy.length() != 12) {
        return false;
    }

    // Sprawdzenie czy każdy znak numer jest cyfrą
    for (char c : numer_rozliczeniowy) {
        if (!isdigit(c)) {
            return false;
        }
    }

    // Jeśli wszystkie warunki są spełnione, numer jest poprawny
    return true;
}

// Funkcja sprawdzająca, czy typ konta jest jedną literą 'C' lub 'S'
bool czyPoprawnyTypKonta(const string& typ_konta) {
    // Sprawdź, czy typ ma dokładnie jeden znak
    if (typ_konta.length() != 1) {
        return false;
    }

    // Pobierz pierwszy (i jedyny) znak
    char znak = typ_konta[0];

    // Sprawdź, czy znak jest literą
    if (!isalpha(znak)) {
        return false;
    }

    // Konwertuj na wielką literę, aby obsłużyć zarówno 'c' jak i 'C'
    znak = toupper(znak);

    // Sprawdź, czy znak jest równy 'C' lub 'S'
    return (znak == 'C' || 'S');
}

// Funkcja generująca numer konta
string generateRandomNumber() {
    random_device rd;
    mt19937 generator(rd());
    uniform_int_distribution<int> distribution(0, 9);

    string numer_rozliczeniowy;
    numer_rozliczeniowy.reserve(26);

    for (int i = 0; i < 26; ++i) {
        int digit = distribution(generator);
        numer_rozliczeniowy += to_string(digit);
    }

    return numer_rozliczeniowy;
}

void zamknijKonto(sql::Connection* con, const string& pesel) {
    try {
        unique_ptr<sql::PreparedStatement> pstmt(con->prepareStatement("DELETE FROM bankregisterclient WHERE pesel = ?"));
        pstmt->setString(1, pesel);
        pstmt->executeUpdate();
        cout << "Twoje konto zostalo zamkniete." << endl;
    } catch (sql::SQLException& e) {
        cerr << "SQL Error: " << e.what() << endl;
        cerr << "SQLState: " << e.getSQLState() << endl;
        cerr << "Error Code: " << e.getErrorCode() << endl;
    } catch (exception& e) {
        cerr << "Other Error: " << e.what() << endl;
    }
}

int sprawdzStanKonta(sql::Connection* con, const string& pesel) {
    try {
        unique_ptr<sql::PreparedStatement> pstmt(con->prepareStatement("SELECT stan_konta FROM bankregisterclient WHERE pesel = ?"));
        pstmt->setString(1, pesel);
        unique_ptr<sql::ResultSet> res(pstmt->executeQuery());
        if (res->next()) {
            return res->getInt("stan_konta");
        } else {
            cerr << "Nie znaleziono konta z podanym peselem." << endl;
            return -1;
        }
    } catch (sql::SQLException& e) {
        cerr << "SQL Error: " << e.what() << endl;
        cerr << "SQLState: " << e.getSQLState() << endl;
        cerr << "Error Code: " << e.getErrorCode() << endl;
        return -1;
    } catch (exception& e) {
        cerr << "Other Error: " << e.what() << endl;
        return -1;
    }
}

Konto sprawdzDaneKonta(sql::Connection* con, const string& pesel) {
    Konto konto;
    try {
        unique_ptr<sql::PreparedStatement> pstmt(con->prepareStatement("SELECT id, pesel, name, lastname, numer_rozliczeniowy, typ_konta FROM bankregisterclient WHERE pesel = ?"));
        pstmt->setString(1, pesel);
        unique_ptr<sql::ResultSet> res(pstmt->executeQuery());
        if (res->next()) {
            konto.ustawId(res->getInt("id"));
            konto.ustawPesel(res->getString("pesel"));
            konto.ustawImie(res->getString("name"));
            konto.ustawNazwisko(res->getString("lastname"));
            konto.ustawNumerRozliczeniowy(res->getString("numer_rozliczeniowy"));
            konto.ustawTypKonta(res->getString("typ_konta")[0]); // Pobranie pierwszego znaku
        } else {
            cerr << "Nie znaleziono konta z podanym peselem." << endl;
            konto.ustawId(-1);
        }
    } catch (sql::SQLException& e) {
        cerr << "SQL Error: " << e.what() << endl;
        cerr << "SQLState: " << e.getSQLState() << endl;
        cerr << "Error Code: " << e.getErrorCode() << endl;
        konto.ustawId(-1);
    } catch (exception& e) {
        cerr << "Other Error: " << e.what() << endl;
        konto.ustawId(-1);
    }
    return konto;
}

void wplata(sql::Connection* con, const string& pesel, double kwota) {
    try {
        unique_ptr<sql::PreparedStatement> pstmt(con->prepareStatement("UPDATE bankregisterclient SET stan_konta = stan_konta + ? WHERE pesel = ?"));
        pstmt->setDouble(1, kwota);
        pstmt->setString(2, pesel);
        pstmt->executeUpdate();
        cout << "Wplata dokonana" << endl;
    } catch (sql::SQLException& e) {
        cerr << "SQL Error: " << e.what() << endl;
        cerr << "SQLState: " << e.getSQLState() << endl;
        cerr << "Error Code: " << e.getErrorCode() << endl;
    } catch (exception& e) {
        cerr << "Other Error: " << e.what() << endl;
    }
}

void wyplata(sql::Connection* con, const string& pesel, double kwota) {
    try {
        unique_ptr<sql::PreparedStatement> pstmt(con->prepareStatement("UPDATE bankregisterclient SET stan_konta = stan_konta - ? WHERE pesel = ?"));
        pstmt->setDouble(1, kwota);
        pstmt->setString(2, pesel);
        pstmt->executeUpdate();
        cout << "Wyplata dokonana" << endl;
    } catch (sql::SQLException& e) {
        cerr << "SQL Error: " << e.what() << endl;
        cerr << "SQLState: " << e.getSQLState() << endl;
        cerr << "Error Code: " << e.getErrorCode() << endl;
    } catch (exception& e) {
        cerr << "Other Error: " << e.what() << endl;
    }
}

void przelew(sql::Connection* con, const string& pesel, const string& peselDocelowy, double kwota) {
    try {
        // Rozpocznij transakcję
        con->setAutoCommit(false);

        // Sprawdź, czy konto docelowe istnieje
        unique_ptr<sql::PreparedStatement> checkStmt(con->prepareStatement("SELECT COUNT(*) FROM bankregisterclient WHERE pesel = ?"));
        checkStmt->setString(1, peselDocelowy);
        unique_ptr<sql::ResultSet> checkRes(checkStmt->executeQuery());
        checkRes->next();
        if (checkRes->getInt(1) == 0) {
            cout << "Konto docelowe nie istnieje." << endl;
            con->rollback(); // Wycofaj transakcję
            return;
        }

        // Zaktualizuj stan konta nadawcy
        unique_ptr<sql::PreparedStatement> updateStmt1(con->prepareStatement("UPDATE bankregisterclient SET stan_konta = stan_konta - ? WHERE pesel = ?"));
        updateStmt1->setDouble(1, kwota);
        updateStmt1->setString(2, pesel);
        updateStmt1->executeUpdate();

        // Zaktualizuj stan konta odbiorcy
        unique_ptr<sql::PreparedStatement> updateStmt2(con->prepareStatement("UPDATE bankregisterclient SET stan_konta = stan_konta + ? WHERE pesel = ?"));
        updateStmt2->setDouble(1, kwota);
        updateStmt2->setString(2, peselDocelowy);
        updateStmt2->executeUpdate();

        // Zatwierdź transakcję
        con->commit();
        cout << "Przelew wykonany pomyslnie." << endl;
    } catch (sql::SQLException& e) {
        cerr << "SQL Error: " << e.what() << endl;
        cerr << "SQLState: " << e.getSQLState() << endl;
        cerr << "Error Code: " << e.getErrorCode() << endl;
        try {
            con->rollback(); // Wycofaj transakcję w przypadku błędu
        } catch (sql::SQLException& e2) {
            cerr << "SQL Error during rollback: " << e2.what() << endl;
            cerr << "SQLState: " << e2.getSQLState() << endl;
            cerr << "Error Code: " << e2.getErrorCode() << endl;
        }
    } catch (exception& e) {
        cerr << "Other Error: " << e.what() << endl;
        try {
            con->rollback(); // Wycofaj transakcję w przypadku błędu
        } catch (sql::SQLException& e2) {
            cerr << "SQL Error during rollback: " << e2.what() << endl;
            cerr << "SQLState: " << e2.getSQLState() << endl;
            cerr << "Error Code: " << e2.getErrorCode() << endl;
        }
    } finally {
        // Wróć do trybu autocommit
        con->setAutoCommit(true);
    }
}

int main() {
    try {
        sql::Driver* driver = get_driver_instance();
        unique_ptr<sql::Connection> con(driver->connect(server, username, password));
        con->setSchema("bank");

        cout << "Witaj w banku!" << endl;
        while (true) {
            cout << "1. Zarejestruj konto" << endl;
            cout << "2. Zaloguj" << endl;
            cout << "3. Wyjdz" << endl;
            cout << "Wybierz opcje: ";
            int choice;
            cin >> choice;

            switch (choice) {
                case 1: {
                    string pesel, name, lastname, typ_konta, numer_rozliczeniowy, password;

                    cout << "Podaj pesel: ";
                    cin >> pesel;
                    while (!czyPeselPoprawny(pesel)) {
                        cout << "Niepoprawny PESEL. Sprobuj ponownie: ";
                        cin >> pesel;
                    }

                    cout << "Podaj numer rozliczeniowy: ";
                    cin >> numer_rozliczeniowy;
                    while (!czyNumerPoprawny(numer_rozliczeniowy)) {
                        cout << "Niepoprawny numer rozliczeniowy. Sprobuj ponownie: ";
                        cin >> numer_rozliczeniowy;
                    }

                    cout << "Podaj typ konta (C - konto osobiste, S - konto oszczednosciowe): ";
                    cin >> typ_konta;
                    while (!czyPoprawnyTypKonta(typ_konta)) {
                        cout << "Niepoprawny typ konta. Sprobuj ponownie (C lub S): ";
                        cin >> typ_konta;
                    }

                    cout << "Podaj imie: ";
                    cin >> name;
                    cout << "Podaj nazwisko: ";
                    cin >> lastname;
                    password = getHiddenPassword();

                    try {
                        unique_ptr<sql::PreparedStatement> pstmt(con->prepareStatement("INSERT INTO bankregisterclient(pesel, name, lastname, numer_rozliczeniowy, typ_konta, password, stan_konta) VALUES (?, ?, ?, ?, ?, ?, 0)"));
                        pstmt->setString(1, pesel);
                        pstmt->setString(2, name);
                        pstmt->setString(3, lastname);
                        pstmt->setString(4, numer_rozliczeniowy);
                        pstmt->setString(5, typ_konta);
                        pstmt->setString(6, password);
                        pstmt->executeUpdate();
                        cout << "Rejestracja zakonczona sukcesem!" << endl;
                    } catch (sql::SQLException& e) {
                        cerr << "SQL Error: " << e.what() << endl;
                        cerr << "SQLState: " << e.getSQLState() << endl;
                        cerr << "Error Code: " << e.getErrorCode() << endl;
                    } catch (exception& e) {
                        cerr << "Other Error: " << e.what() << endl;
                    }
                    break;
                }
                case 2: {
                    string pesel;
                    cout << "Podaj pesel: ";
                    cin >> pesel;
                    if (login(con.get(), pesel)) {
                        cout << "Logowanie udane!" << endl;
                        while (true) {
                            cout << "1. Zamknij konto" << endl;
                            cout << "2. Sprawdz stan konta" << endl;
                            cout << "3. Wplata" << endl;
                            cout << "4. Wyplata" << endl;
                            cout << "5. Przelew" << endl;
                            cout << "6. Sprawdz dane konta" << endl;
                            cout << "7. Wyloguj" << endl;
                            cout << "Wybierz opcje: ";
                            int sub_choice;
                            cin >> sub_choice;

                            switch (sub_choice) {
                                case 1:
                                    zamknijKonto(con.get(), pesel);
                                    break;
                                case 2: {
                                    int stan_konta = sprawdzStanKonta(con.get(), pesel);
                                    if (stan_konta != -1) {
                                        cout << "Stan konta: " << stan_konta << endl;
                                    }
                                    break;
                                }
                                case 3: {
                                    double kwota;
                                    cout << "Podaj kwote do wplaty: ";
                                    cin >> kwota;
                                    wplata(con.get(), pesel, kwota);
                                    break;
                                }
                                case 4: {
                                    double kwota;
                                    cout << "Podaj kwote do wyplaty: ";
                                    cin >> kwota;
                                    wyplata(con.get(), pesel, kwota);
                                    break;
                                }
                                case 5: {
                                    string peselDocelowy;
                                    double kwota;
                                    cout << "Podaj pesel odbiorcy: ";
                                    cin >> peselDocelowy;
                                    cout << "Podaj kwote do przelania: ";
                                    cin >> kwota;
                                    przelew(con.get(), pesel, peselDocelowy, kwota);
                                    break;
                                }
                                case 6: {
                                    Konto konto = sprawdzDaneKonta(con.get(), pesel);
                                    if (konto.pobierzId() != -1) {
                                        cout << "Dane konta:" << endl;
                                        cout << "Id: " << konto.pobierzId() << endl;
                                        cout << "PESEL: " << konto.pobierzPesel() << endl;
                                        cout << "Imie: " << konto.pobierzImie() << endl;
                                        cout << "Nazwisko: " << konto.pobierzNazwisko() << endl;
                                        cout << "Numer rozliczeniowy: " << konto.pobierzNumerRozliczeniowy() << endl;
                                        cout << "Typ konta: " << konto.pobierzTypKonta() << endl;
                                    }
                                    break;
                                }
                                case 7:
                                    cout << "Wylogowano" << endl;
                                    break;
                                default:
                                    cout << "Niepoprawna opcja. Sprobuj ponownie." << endl;
                                    break;
                            }
                            if (sub_choice == 1 || sub_choice == 7) {
                                break;
                            }
                        }
                    } else {
                        cout << "Logowanie nieudane. Sprobuj ponownie." << endl;
                    }
                    break;
                }
                case 3:
                    cout << "Do widzenia!" << endl;
                    return 0;
                default:
                    cout << "Niepoprawna opcja. Sprobuj ponownie." << endl;
                    break;
            }
        }
    } catch (sql::SQLException& e) {
        cerr << "SQL Error: " << e.what() << endl;
        cerr << "SQLState: " << e.getSQLState() << endl;
        cerr << "Error Code: " << e.getErrorCode() << endl;
    } catch (exception& e) {
        cerr << "Other Error: " << e.what() << endl;
    }

    return 0;
}
